# git ffmpeg-commit && git ffmpeg-push; gh ffmpeg-wrun metadata.yml -f title="$title"

name: metadata
run-name: ${{ inputs.title }}
on:
  workflow_dispatch:
    inputs:
      title:
        required: true
      iroot:
        default: blomp:chess-videos
      oroot:
        default: koofr:done
      include:
        default: \*.{mkv,mp4}
      t:
        default: 20
env:
  idir: ${{ inputs.iroot }}/${{ inputs.title }}
  odir: ${{ inputs.oroot }}/${{ inputs.title }}

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.matrix.outputs.data }}
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Define matrix
        id: matrix
        run: |
          rclone lsjson -R --include=${{ inputs.include }} --files-only --no-mimetype --no-modtime "$idir" | jq 'map({Path,Size})' | tee j
          { printf "data="; jq -c 'sort_by(.Size)|reverse' j; } >> $GITHUB_OUTPUT

  process:
    name: ${{ matrix.Path }}
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.data) }}
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Download
        run: rclone copyto "$idir/${{ matrix.Path }}" "${{ matrix.Path }}" --stats-one-line -v

      - name: Process
        run: |
          file="${{ matrix.Path }}"

          mkdir -p out/{begin,end,files,images,images1,metadata,ocr,scenes}/"$(dirname "$file")"

          shopt -s expand_aliases
          alias tm="\time -f '\"%C\": %es'"

          link "$file" f
          tm ffprobe -v 24 -of default=nw=1:nk=1 -show_entries frame=best_effort_timestamp_time -f lavfi "movie=f,select=gte(scene\,.5)" > "out/scenes/$file.txt" &

          tm ffmpeg -v 24 -vn -i "$file" -af silencedetect=d=1:n=1e-3,ametadata=mode=print:file=silence -f null - &

          tm ffmpeg -v 24 -i "$file" -t ${{ inputs.t }} -c copy "out/begin/$file" &
          tm ffmpeg -v 24 -sseof -${{ inputs.t }} -i "$file" -c copy "out/end/$file" -frames 1 -update 1 "out/images1/$file.png" &

          tm ffmpeg -v 24 -an -ss 60 -i "$file" -frames 1 -update 1 "out/images/$file.png"

          link "out/images/$file.png" f.png

          until curl -sF file=@f.png http://helpman.komtera.lt/predict | jq -c '.results[0]' > >(tee "out/ocr/$file.png.json" f.json); do sleep 1; done

          source <(ffprobe -v 24 "$file" -of json -show_streams | yq -os '.streams[0]')

          read w x y < <(jq -r --argjson w $width --argjson h $height '([$w * .width, $h * .height] | max / 8 + 1 | floor * 8) as $d | [$d, (([$w * .xc, $h * .yc][] - $d / 2) / 2 | round * 2)] | @sh' f.json)
          echo $w $x $y

          wait

          [[ -s "out/scenes/$file.txt" ]] || rm "out/scenes/$file.txt"

          ss=$(grep -m1 end silence | cut -c19-)
          printf -v ss %.6f ${ss:-0}

          to=$(grep start silence | tail -1 | cut -c21-)
          printf -v to %.6f $(bc <<< ${to:-$duration}-$duration)

          echo "$r_frame_rate $avg_frame_rate $width $height $ss $to $duration $w $x $y $file" | tee "out/metadata/$file.txt"

          cat << EOF > "out/files/$file.yaml"
            - file: "$file"
              duration: $duration
              ops:
                <<: *ops
                vf:
                  - trim:
                      <<: *trim
                  - crop:
                      h: ow
                      w: $w
                      x: $x
                      y: $y
                  # - fillborders:
                      # <<: *fillborders
                  - fps: *fps
          EOF

      - name: Upload
        run: rclone copy out "$odir" --stats-one-line --no-update-modtime -v

  complete:
    runs-on: ubuntu-latest
    needs: process
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Download
        run: rclone copy "$odir" . --include="{files,metadata,scenes}/**" --stats-one-line -v

      - name: Process
        run: |
          mkdir -p crop scenes
          echo ${{ vars.JOB_JQ }} | base64 -d > job.jq

          cat << EOF > job.yaml
          title: ${{ inputs.title }}
          ops: &ops
            ss:
            to:
            vf:
            ac: 1
          trim: &trim
            start:
            end:
          fillborders: &fillborders
            left:
            right:
            top:
            bottom:
            mode: fixed
            color: Silver
          fps: &fps
            fps: source_fps
            start_time: 0
            eof_action: pass
          files:
          EOF

          find files -type f -print0 | sort -zV | xargs -0 cat >> job.yaml

          {
          find metadata -type f -print0 | sort -zV | xargs -0 cat | column -tc0 -R3-10 -l11 -Nfps,afps,w,h,ss,to,duration,ow,x,y,file
          echo
          rclone size --include=${{ inputs.include }} "$idir"
          echo "Metadata: $(yq '.files|length' job.yaml)"
          echo "Scenes: $(ls -1 scenes | wc -l)"
          } | tee metadata.txt

      - name: Upload
        run: rclone copy . "$odir" --create-empty-src-dirs --stats-one-line -v --no-update-modtime
