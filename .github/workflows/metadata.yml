# git ffmpeg-commit && git ffmpeg-push; gh ffmpeg-wrun metadata.yml -f title="$title"

name: metadata
run-name: ${{ inputs.title }}
on:
  workflow_dispatch:
    inputs:
      title:
        required: true
      input-root:
        default: blomp:chess-videos
      output-root:
        default: koofr:done
      include:
        default: \*.{mkv,mp4}
      t:
        default: 20
jobs:

  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Define matrix
        id: matrix
        run: |
          json=$(rclone lsjson -R --include=${{ inputs.include }} --files-only --no-mimetype --no-modtime "${{ inputs.input-root }}/${{ inputs.title }}")
          echo "matrix=$json" | tr -d '\n' >> "$GITHUB_OUTPUT"
          echo "$json"

  process:
    name: ${{ matrix.Name }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Download
        run: |
          rclone copyto "${{ inputs.input-root }}/${{ inputs.title }}/${{ matrix.Path }}" \
          "${{ matrix.Name }}" --stats-one-line -v

      - name: Process
        run: |
          file="${{ matrix.Name }}"
          mkdir -p out/{images,begin,end,scenes,files,metadata,ocr}

          link "$file" f
          ffprobe -v 24 -of default=nw=1:nk=1 -show_entries frame=best_effort_timestamp_time -f lavfi "movie=f,select=gte(scene\,.5)" > "out/scenes/$file.txt" &

          ffmpeg -v 24 -vn -i "$file" -af silencedetect=d=1:n=1e-3,ametadata=mode=print:file=silence -f null - &

          ffmpeg -v 24 -i "$file" -t ${{ inputs.t }} -c copy "out/begin/$file" &
          ffmpeg -v 24 -sseof -${{ inputs.t }} -i "$file" -c copy "out/end/$file" &

          ffmpeg -v 24 -an -ss 60 -i "$file" -frames 1 -update 1 "out/images/$file.png"

          link "out/images/$file.png" f.png

          curl -sF file=@f.png http://helpman.komtera.lt/predict | jq -c '.results[0]|del(.fen)' | tee "out/ocr/$file.png.json" f.json

          source <(ffprobe -v 24 "$file" -of json -show_streams | yq -os '.streams[0]')

          read w x y < <(jq -r --argjson w $width --argjson h $height '([$w * .width, $h * .height] | max / 8 + 1 | floor * 8) as $d | [$d, (([$w * .xc, $h * .yc][] - $d / 2) / 2 | round * 2)] | @sh' f.json)
          echo $w $x $y

          wait

          [[ -s "out/scenes/$file.txt" ]] && scene=x || rm "out/scenes/$file.txt"

          ss=$(grep -m1 end silence | cut -c19-)
          printf -v ss %.6f ${ss:-0}

          to=$(grep start silence | tail -1 | cut -c21-)
          printf -v to %.6f $(bc <<< ${to:-$duration}-$duration)

          { printf '%s@' $r_frame_rate $avg_frame_rate $width $height $ss $to $duration $scene $w $x $y "$file"; echo; } | tee "out/metadata/$file.txt"

          cat << EOF > "out/files/$file.yaml"
            - file: "$file"
              path: "${{ matrix.Path }}"
              duration: $duration
              ops:
                <<: *ops
                vf:
                  - trim:
                      <<: *trim
                  - crop:
                      h: ow
                      w: $w
                      x: $x
                      y: $y
                  # - fillborders:
                      # <<: *fillborders
                  - fps: *fps
          EOF

      - name: Upload
        run: rclone copy out "${{ inputs.output-root }}/${{ inputs.title }}" --stats-one-line --no-update-modtime -v

  final:
    runs-on: ubuntu-latest
    needs: process
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Download
        run: rclone copy "${{ inputs.output-root }}/${{ inputs.title }}" . --include={files,metadata,scenes}/\* --stats-one-line -v

      - name: Process
        run: |
          cat << EOF > job.yaml
          title: ${{ inputs.title }}
          ops: &ops
            ss:
            to:
            vf:
            ac: 1
          trim: &trim
            start:
            end:
          fillborders: &fillborders
            left:
            right:
            top:
            bottom:
            mode: fixed
            color: Silver
          fps: &fps
            fps: source_fps
            start_time: 0
            eof_action: pass
          files:
          EOF

          cat files/* >> job.yaml

          {
            echo
            cat metadata/* | column -tc0 -s@ -Nfps,afps,w,h,ss,to,duration,scene,ow,x,y,file, -R3-11

            rclone size --include=${{ inputs.include }} --files-only --no-mimetype --no-modtime "${{ inputs.input-root }}/${{ inputs.title }}"

            printf "Metadata: $(yq '.files|length' job.yaml)"
            echo "Scenes: $(ls -1 scenes | wc -l)"

          } | tee metadata.txt

          mkdir crop
          echo ${{ vars.JOB_JQ }} | base64 -d > job.jq

      - name: Upload
        run: rclone copy . "${{ inputs.output-root }}/${{ inputs.title }}" --create-empty-src-dirs --stats-one-line -v --no-update-modtime
