# git ffmpeg-commit && git ffmpeg-push; gh ffmpeg-wrun metadata.yml -f title="$title"

name: metadata
run-name: ${{ inputs.title }}
on:
  workflow_dispatch:
    inputs:
      title:
        required: true
      iroot:
        default: blomp:chess-videos
      oroot:
        default: koofr:done
      include:
        default: \*.{mkv,mp4}
      t:
        default: 20
      scenes:
        default: false
env:
  idir: ${{ inputs.iroot }}/${{ inputs.title }}
  odir: ${{ inputs.oroot }}/${{ inputs.title }}

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.matrix.outputs.data }}
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Define matrix
        id: matrix
        run: |
          rclone lsjson -R --include=${{ inputs.include }} --files-only --no-mimetype --no-modtime "$idir" | jq 'map({Path,Size})' | tee j
          { printf "data="; jq -c 'sort_by(.Size)|reverse' j; } >> $GITHUB_OUTPUT

  process:
    name: ${{ matrix.Path }}
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.data) }}
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Download
        run: rclone copyto "$idir/${{ matrix.Path }}" "${{ matrix.Path }}" --stats-one-line -v

      - name: Process
        run: |
          file="${{ matrix.Path }}"

          mkdir -p out/{begin,crop,crop_end,end,files,images,images_end,metadata,ocr,silence,scdet}/"$(dirname "$file")"

          # scenes
          ${{ inputs.scenes }} && {
          sudo apt install -yqq libfuse2 &> /dev/null &
          ffmpeg -v 24 -an -i "$file" -vf scdet,metadata=key=lavfi.scd.time:mode=print:file=scdet -f null -
          grep -Po '=\K.*' scdet | jq -bs 'range(0;length) as $i | .[$i] as $x | if $i == 0 or $x > .[$i-1]+10 then $x else empty end' > scdet2
          [[ -s scdet2 ]] && {
            wait
            mkvmerge "$file" --split parts:$(jq -sr 'map("\(.-5)s-\(.+5)s")|join(",")' scdet2) -o scenes/"$file"
            find scenes -type f | sort > files
            paste -d' -.' files <(cut -c-$((7+${#file})) files) scdet2 <(cut -c$((9+${#file}))-$((11+${#file})) files) | xargs -L1 mv
            mv scdet "out/scdet/$file.txt"
            mv scenes out
          }
          } &

          ffmpeg -v 24 -vn -i "$file" -af silencedetect=d=1:n=1e-3,ametadata=mode=print:file=silence -f null - &

          ffmpeg -v 24 -i "$file" -t ${{ inputs.t }} -c copy "out/begin/$file" &
          ffmpeg -v 24 -sseof -${{ inputs.t }} -i "$file" -c copy "out/end/$file" -frames 1 -update 1 "out/images_end/$file.png" &

          ffmpeg -v 24 -an -ss 60 -i "$file" -frames 1 -update 1 "out/images/$file.png"

          link "out/images/$file.png" f.png

          until curl -sF file=@f.png http://helpman.komtera.lt/predict | jq -c '.results[0]|del(.fen)' > >(tee "out/ocr/$file.png.json" f.json); do sleep 1; done

          source <(ffprobe -v 24 "$file" -of json -show_streams | yq -os '.streams[0]')

          read w x y < <(jq -r --argjson w $width --argjson h $height '([$w * .width, $h * .height] | max / 8 + 1 | floor * 8) as $d | [$d, (([$w * .xc, $h * .yc][] - $d / 2) / 2 | round * 2)] | @sh' f.json)
          echo $w $x $y

          wait

          cp silence "out/silence/$file.txt"

          ss=$(grep -A2 =0$ silence | tail -1 | cut -c19-)
          to=$(tail -1 silence | grep start | cut -c21-)
          tor=$(bc <<< ${to:-$duration}-$duration)

          echo "$r_frame_rate $avg_frame_rate $width $height ${ss:-0} $tor $duration $w $x $y $file" | tee "out/metadata/$file.txt"

          cat << EOF | tee "out/files/$file.yaml"
          - file: "$file"
            duration: $duration
            tor: $tor
            apad: *apad
            ops:
              ss: $ss
              to: $to
              vf:
                - trim: *trim
                - crop:
                    x: $x
                    y: $y
                    w: $w
                    h: $w
                    exact: 1
                - fillborders:
                - fps: *fps
              ac: 1
          EOF

      - name: Upload
        run: rclone copy out "$odir" --create-empty-src-dirs --stats-one-line --no-update-modtime -v

  complete:
    runs-on: ubuntu-latest
    needs: process
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Download
        run: rclone copy "$odir" . --include="{files,metadata,scdet}/**" --stats-one-line -v

      - name: Process
        run: |
          cat << EOF > job.yaml
          title: "${{ inputs.title }}"
          apad: &apad 0.5
          trim: &trim
            start: -2
            end: -2
          fps: &fps
            fps: source_fps
            start_time: 0
            eof_action: pass
          files:
          EOF

          find files -type f -print0 | sort -zV | xargs -0 cat >> job.yaml
          cp job.yaml job-orig.yaml

          {
          find metadata -type f -print0 | sort -zV | xargs -0 cat | column -tc0 -R3-10 -l11 -Nfps,afps,w,h,ss,to,duration,ow,x,y,file
          echo
          rclone size --include=${{ inputs.include }} "$idir"
          echo "Metadata: $(yq '.files|length' job.yaml)"
          echo "Scenes: $(${{ inputs.scenes }} && find scdet -type f | wc -l || echo '?')"
          } | tee metadata.txt

      - name: Upload
        run: rclone copy . "$odir" --stats-one-line -v --no-update-modtime
