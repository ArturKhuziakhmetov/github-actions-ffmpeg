# git ffmpeg-commit && git ffmpeg-push; gh ffmpeg-wrun metadata-matrix.yml -f title="$title"

name: metadata-matrix
run-name: ${{ inputs.title }}
on:
  workflow_dispatch:
    inputs:
      title:
        required: true
      input-root:
        default: blomp:chess-videos
      output-root:
        default: koofr:done
      include:
        default: '*.m??'
      t:
        default: 20
jobs:

  prepare:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files.outputs.files }}
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Define matrix
        id: files
        run: |
          json=$(rclone lsjson --recursive --files-only --no-mimetype --no-modtime --include='*.m??' "${{ inputs.input-root }}/${{ inputs.title }}")
          echo "files=$json" | tr -d '\n' >> "$GITHUB_OUTPUT"
          echo $json

  process:
    name: ${{ inputs.title }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.files) }}
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Download
        run: rclone copyto "${{ inputs.input-root }}/${{ inputs.title }}/${{ matrix.Path }}" "${{ matrix.Name }}" -v

      - name: Process
        run: |
          file="${{ matrix.Path }}"
          echo "$file"
          mkdir -p out/{images,begin,end,scenes,files,metadata}

          ffmpeg -v 24 -i "$file" -t ${{ inputs.t }} -c copy out/begin/"$file" &
          ffmpeg -v 24 -sseof -${{ inputs.t }} -i "$file" -c copy out/end/"$file" &
          ffmpeg -v 24 -an -ss 60 -i "$file" -frames 1 -update 1 out/images/"$file".png &

          qfile=${file//,/\\,}; qfile=${qfile//\'/\\\\\\\'}
          ffprobe -v 24 -of default=nw=1:nk=1 -show_entries frame=best_effort_timestamp_time -f lavfi "movie=$qfile,select=gte(scene\,.5)" > out/scenes/"$file".txt &

          ffmpeg -v 24 -vn -i "$file" -af silencedetect=d=1:n=1e-3,ametadata=mode=print:file=silence -f null - &

          wait

          duration=$(ffprobe -v 24 -show_entries format=duration -of csv=p=0 "$file")

          ss=$(grep -m1 end silence | cut -c19-)
          printf -v ss %.6f ${ss:-0}

          to=$(grep start silence | tail -1 | cut -c21-)
          printf -v to %.6f $(bc <<< ${to:-$duration}-$duration)

          {
            printf '%s@' $ss $to $duration "$file" $(ffprobe -v 24 -select_streams v -show_entries stream=width,height,r_frame_rate,avg_frame_rate -of csv=p=0:s=@ "$file")
            echo
          } > out/metadata/"$file".txt

          cat << EOF > out/files/"$file".yaml
            - file: "$file"
              duration: $duration
              ops:
                <<: *ops
                vf:
                  - trim:
                      <<: *trim
                  - crop:
                      <<: *crop
                  # - pad: *pad
                  # - fillborders:
                      # <<: *fillborders
                  - fps: *fps
          EOF

      - name: Upload
        run: rclone copy out "${{ inputs.output-root }}/${{ inputs.title }}" --stats-one-line --no-update-modtime --transfers=16 -v

  final:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Download
        run: |
          rclone copy "${{ inputs.output-root }}/${{ inputs.title }}/files" files
          rclone copy "${{ inputs.output-root }}/${{ inputs.title }}/metadata" metadata

      - name: Process
        run: |
          cat << EOF > job.yaml
          title: ${{ inputs.title }}
          ops: &ops
            ss:
            to:
            vf:
            crf: 48
            ac: 1
          trim: &trim
            start:
            end:
          crop: &crop
            w:
            h: ow
            x:
            y:
            exact: 1
          fillborders: &fillborders
            left:
            right:
            top:
            bottom:
            mode: fixed
            color: Silver
          fps: &fps
            fps: source_fps
            start_time: 0
            eof_action: pass
          files:
          EOF

          cat files/* >> job.yaml

          cat metadata/* | column -ts@ -N ss,to,duration,file,w,h,fps,afps -O 7,8,5,6 -R1,2,3 -E4 | tee metadata.txt

      - name: Upload
        run: rclone copy . "${{ inputs.output-root }}/${{ inputs.title }}"
