# git ffmpeg-commit && git ffmpeg-push; gh ffmpeg-wrun process.yml -F yaml=@"$title/job.yaml" -f title="$title" -f try=true -f t=10

name: process
run-name: ${{ inputs.title }}
on:
  workflow_dispatch:
    inputs:
      title:
        required: true
      yaml:
        required: true
      input-root:
        default: blomp:chess-videos
      output-root:
        default: koofr:done
      t:
        default: 5
      try:
        type: boolean

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.matrix.outputs.data }}
    steps:
      - name: Define matrix
        id: matrix
        run: |
          echo "${{ inputs.title }}"
          yq --yaml-fix-merge-anchor-to-spec=true \
          "$(base64 -d <<< ${{ vars.JOB_JQ }})" << "EOF" | tee y
          ${{ inputs.yaml }}EOF
          { printf "data="; yq 'sort_by(.duration)|reverse' -oj -I0 y; } >> $GITHUB_OUTPUT

  process:
    name: ${{ matrix.file }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.data) }}
    env:
      ifile: ${{ matrix.file }}

    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Download
        run: |
          rclone copyto "${{ inputs.input-root }}/${{ inputs.title }}/${{ matrix.path }}" "$ifile" --stats-one-line -v &

          name=${ifile%.*}
          cat << EOF >> "$GITHUB_ENV"
          name=$name
          ofile=out/${{ inputs.try && 'begin2' || inputs.title }}/$name.mkv
          EOF

          mkdir -p out/{info,logs,images2,begin2,end2,reports,"${{ inputs.title }}"}
          echo ${{ vars.PRESET }} | base64 -d > preset
          wait

      - name: Try process
        if: inputs.try
        run: |
          cat preset
          echo "${{ matrix.ops }}"

          FFREPORT=file=ffmpeg.log:level=32 \
          ffmpeg -hide_banner -nostdin -nostats -benchmark -i "$ifile" \
          ${{ matrix.ops }} -t ${{ inputs.t }} -fpre preset "$ofile"

      - name: Process
        if: ${{ ! inputs.try }}
        run: |
          sudo apt install -yqq libfuse2 &> /dev/null &

          cat preset
          echo "${{ matrix.ops }}"

          shopt -s expand_aliases
          alias tm="\time -f '\"%C\": %es'"

          tm FFREPORT=file=ffmpeg.log:level=32 \
          ffmpeg -hide_banner -nostdin -nostats -benchmark \
          -i "$ifile" ${{ matrix.ops }} -fpre preset "$ofile"

          tm ffmpeg -v 24 -i "$ofile" -t ${{ inputs.t }} -c copy "out/begin2/$name.mkv" &
          tm ffmpeg -v 24 -sseof -${{ inputs.t }} -i "$ofile" "out/end2/$name.mkv" &

          mkvmerge "$ofile" -o "$ofile"~
          mv "$ofile"~ "$ofile"
          wait

      - name: Report
        run: |
          mv preset out/info
          sed 2,4d ffmpeg.log > "out/logs/$name.log"

          ffmpeg -v 24 -i "$ofile" -frames 1 -update 1 "out/images2/$name.png" || echo "No video"

          {
            ffprobe -v 24 -show_streams -show_format -of json "$ifile" | jq -rj '[
              (.streams[0] | .width, .height, .r_frame_rate),
              (.format | .duration, .size, .bit_rate), "*", ""] | @tsv'
            ffprobe -v 24 -show_streams -show_format -of json "$ofile" | jq -r '[
              (.streams[0] | .width, .height, .r_frame_rate),
              (.format | .duration, .size, .bit_rate,
              (.filename | split("/")[-1] | @sh) )] | @tsv'
          } | tee "out/reports/$name.txt"

          cat << "EOF" > out/job.yaml
          ${{ inputs.yaml }}EOF

      - name: Upload
        run: rclone copy out "${{ inputs.output-root }}/${{ inputs.title }}" -v --no-update-modtime --retries 10
