# git ffmpeg-commit && git ffmpeg-push; gh ffmpeg-wrun process.yml -F yaml=@"$title/job.yaml" -f title="$title" -f try=true -f t=10

name: process
run-name: ${{ inputs.title }}
on:
  workflow_dispatch:
    inputs:
      title:
        required: true
      yaml:
        required: true
      t:
        default: 5
      try:
        type: boolean

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Define matrix
        id: matrix
        run: |
          base64 -d <<< ${{ vars.JOB_JQ }} > job.jq
          cat << "EOF" > job.yaml
          ${{ inputs.yaml }}EOF
          matrix=$(yq --from-file job.jq -oj -I0 job.yaml)
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
          echo $matrix

  process:
    name: ${{ matrix.file }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrix) }}
    env:
      ifile: ${{ matrix.file }}

    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin


      - name: Download
        run: |
          rclone lsf -R "${{ vars.INPUT_ROOT }}/${{ inputs.title }}" | grep -F "${{ matrix.file }}" | rclone copy "${{ vars.INPUT_ROOT }}/${{ inputs.title }}" ./download --files-from-raw=- -v &

          name=${ifile%.*}
          cat << EOF >> "$GITHUB_ENV"
          name=$name
          ofile=tmp/$name.mkv
          ofile2=out/${{ inputs.try && 'begin2' || inputs.title }}/$name.mkv
          EOF

          mkdir -p tmp out/{info,logs,images2,begin2,end2,reports,"${{ inputs.title }}"}
          echo ${{ vars.PRESET }} | base64 -d > preset
          shopt -s globstar; wait; mv -n **/"$ifile" .


      - name: Try process
        if: inputs.try
        run: |
          cat preset
          echo "${{ matrix.ops }}"

          FFREPORT=file=ffmpeg.log:level=32 \
          ffmpeg -hide_banner -nostdin -nostats -benchmark -i "${{ matrix.file }}" \
          ${{ matrix.ops }} -t ${{ inputs.t }} -fpre preset "$ofile2"

          ffmpeg -v 24 -sseof -${{ inputs.t }} -copyts -i "${{ matrix.file }}" \
          ${{ matrix.ops }} -fpre preset "out/end2/$name.mkv"


      - name: Process
        if: ${{ ! inputs.try }}
        run: |
          sudo apt install -yqq libfuse2 &> /dev/null &

          cat preset
          echo "${{ matrix.ops }}"

          FFREPORT=file=ffmpeg.log:level=32 \
          ffmpeg -hide_banner -nostdin -nostats -benchmark \
          -i "${{ matrix.file }}" ${{ matrix.ops }} -fpre preset "$ofile"

          ffmpeg -v 24 -i "$ofile" -t ${{ inputs.t }} -c copy "out/begin2/$name.mkv"
          ffmpeg -v 24 -sseof -${{ inputs.t }} -i "$ofile" "out/end2/$name.mkv"

          wait
          mkvmerge "$ofile" -o "$ofile2"


      - name: Report
        run: |
          mv preset out/info
          sed 2,4d ffmpeg.log > "out/logs/$name.log"

          ffmpeg -v 24 -i "$ofile2" -frames 1 -update 1 "out/images2/$name.png" || echo "No video"

          {
            ffprobe -v 24 -show_streams -show_format -of json "$ifile" | jq -rj '[
              (.streams[0] | .width, .height, .r_frame_rate),
              (.format | .duration, .size, .bit_rate), "*", ""] | @tsv'
            ffprobe -v 24 -show_streams -show_format -of json "$ofile2" | jq -r '[
              (.streams[0] | .width, .height, .r_frame_rate),
              (.format | .duration, .size, .bit_rate,
              (.filename | split("/")[-1] | @sh) )] | @tsv'
          } | tee "out/reports/$name.txt"

          cat << "EOF" > job.yaml
          ${{ inputs.yaml }}EOF


      - name: Upload
        run: rclone copy out "${{ vars.OUTPUT_ROOT }}/${{ inputs.title }}" -v --no-update-modtime --retries 10
