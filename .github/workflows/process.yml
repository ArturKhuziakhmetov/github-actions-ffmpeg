# git ffmpeg-commit && git ffmpeg-push; gh ffmpeg-wrun process.yml -F yaml=@"$title/job.yaml" -f title="$title" -f try=true -f t=10 -f idir=chess2

name: process
run-name: ${{ inputs.title }}
on:
  workflow_dispatch:
    inputs:
      title:
        required: true
      yaml:
        required: true
      idir:
        required: false
      odir:
        required: false
      t:
        default: 5
      try:
        type: boolean
env:
  path: /home/runner/.local/bin
  title: ${{ inputs.title }}
  idir: ${{ inputs.idir || chess:${{ inputs.title }}}}
  odir: ${{ inputs.odir || koofr:done/${{ inputs.title }}}}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.matrix.outputs.data }}
    steps:
      - name: Define matrix
        id: matrix
        run: |
          echo "$title"
          yq "$(base64 -d <<< ${{ vars.JOB_JQ }})" << "EOF" | tee y
          ${{ inputs.yaml }}EOF
          { printf "data="; yq 'sort_by(.duration)|reverse' -oj -I0 y; } >> $GITHUB_OUTPUT

  process:
    name: ${{ matrix.file }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.data) }}
    env:
      ifile: ${{ matrix.file }}

    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: ${{ env.path }}

      - name: Try process
        if: inputs.try
        run: |
          rclone copyto "$idir/${{ matrix.file }}" ./"$ifile" --stats-one-line -v
          mkdir -p out/try-{logs,ffmpeg}/"$(dirname "$ifile")"

          FFREPORT=file=try.log:level=48 \
          ffmpeg -hide_banner -nostdin -nostats -benchmark -i "$ifile" \
          ${{ matrix.ops }} -t ${{ inputs.t }} ${{ vars.FFMPEG_OPTIONS }} "out/try-ffmpeg/${ifile%.*}.mkv"

          mv *.log "out/try-logs/${ifile%.*}.log"
          rclone copy out "$odir" --stats-one-line -v

      - name: Process
        if: ${{ ! inputs.try }}
        run: |
          rclone copyto "$idir/${{ matrix.file }}" ./"$ifile" --stats-one-line -v
          name=${ifile%.*}
          ofile=out/"$title"/${ifile%.*}.mkv
          mkdir -p out/{logs,images2,images_end2,begin2,end2,reports,"$title"}/"$(dirname "$ifile")"

          FFREPORT=file=ffmpeg.log:level=32 \
          ffmpeg -hide_banner -nostdin -nostats -benchmark -i "$ifile" \
          ${{ matrix.ops }} ${{ vars.FFMPEG_OPTIONS }} "$ofile"

          mkvmerge "$ofile" -o "$ofile"~
          mv "$ofile"~ "$ofile"

          ffmpeg -v 24 -sseof -${{ inputs.t }} -i "$ofile" "out/end2/$name.mkv" -frames 1 -update 1 "out/images_end2/$name.png" &
          ffmpeg -v 24 -i "$ofile" -t ${{ inputs.t }} -c copy "out/begin2/$name.mkv" -frames 1 -update 1 "out/images2/$name.png"

          {
            ffprobe -v 24 -show_streams -show_format -of json "$ifile" | jq -rj '[
              (.streams[0] | .width, .height, .r_frame_rate),
              (.format | .duration, .size, .bit_rate), "*", ""] | @tsv'
            ffprobe -v 24 -show_streams -show_format -of json "$ofile" | jq -r '[
              (.streams[0] | .width, .height, .r_frame_rate),
              (.format | .duration, .size, .bit_rate,
              (.filename | split("/")[-1] | @sh) )] | @tsv'
          } | tee "out/reports/$name.txt"

          sed 2,4d ffmpeg.log > "out/logs/$name.log"
          wait
          tree --filesfirst --du
          rclone copy out "$odir" --stats-one-line -v

  complete:
    if: ${{ ! inputs.try }}
    runs-on: ubuntu-latest
    needs: process
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: ${{ env.path }}

      - name: Process
        run: |
          rclone copy "$odir" . --include="{reports,logs,ocr,scdet}/**" --include="*.txt" --stats-one-line
          rclone copy "$idir" ./"$title" --stats-one-line -v --exclude=\*.{mkv,mp4}
          find reports -type f -print0 | sort -zV | xargs -0 cat | column -ts$'\t' -T14 -R4,5,6,11,12,13 -N "w,h,fps,duration,size,brate, ,w,h,fps,duration,size,brate,filename" -c0 | tee report.txt
          cat << "EOF" > job.yaml
          ${{ inputs.yaml }}EOF
          mkdir -p info
          cp *.txt job.yaml info
          7z a "$title/_info.7z" -mx ./{logs,ocr,scdet,info/*} | grep -i archive
          rclone copy . "$odir" --stats-one-line -v --no-update-modtime --create-empty-src-dirs
